#Mongo Tutorial / Roger Osalde / 13-05-2019 / Hunucmá Yucatán

#BASIC COMMANDS

##Create a variable
> [Name] = {"[Attrivute_1]": "[Caracteristics]", "[Attrivute_2]": "[Caracteristics]"}


##To see the content of the variable
> VariableName


##This command shows us the NoSql databases that we have in mongodb
> show dbs


##To start working with a particular database
> use databaseName


##Drops the current database you're in
>db.dropDatabase()


##The following command can be used to create a collection
> db.createCollection("collectionName").insert


##This command shows us the collections available in the database
>  show collections


##In case we want to delete the created collection
> db.collection_name.drop()


##The Find command shows us the list of documents ("records") of a collection
> db.[coleccion].find()

##Using Accumulators
##Accumulators take a single expression and compute
## the expression for grouped documents.
> db.potions.aggregate([
{"$group": {"_id": "group_key","total": {"$sum": 1}}}


##When values begin with a “$”, they represent
##field paths that point to the value, also
##When fields begin with a “$”, they are
##operators that perform a task("$sum": represent the accumulator")
>db.potion.aggregate([
{"$group": {"_id": "$vendor_id","total": {"$sum": 1}}}
])

###Class22052019
##If you want to know the total number of coincidences for a variable and count other variable 
##at the same time this command is for you.
> db.potions.aggregate([{
"$group": {"id":"$vendor_id",
"total": {"$sum": 1},
"grade_total": {"$sum": "grade"}
}
}
])

##Using $max and $min together
##These functions present the max cuantitive of any variable if this is a number,
##and the other present the min cuantitive of any variable.
> db.potions.aggregate([
{"group": {
"_id": "$vendor_id",
"max_grade": {"$max": "grade"},
"min_grade": {"$min": "grade"}
}
}
])



###############################################################################################
###############################################################################################
######################### Q U E S T I O N S         S E C T I O N S ###########################

##Delete documents in MongoDB without deleting the folder
###R: You can use,and it will delete just the documents with out the folder
> db.coleccion.deleteMany({})

##How to get the last inserted record?
###R: using the natural and specific order that comes from the most recent
###to the oldest and limiting the appearance to only one result.
> db.micoleccion.find().sort({$natural:-1}).limit(1)

##SQL or NoSQL?
###R: 

##MongoDB arrays searches(looking for book authors)
###R: This sentece will give you an array with the exact numbers of the author that had the expecific 
###guidelines that you ask for.
> db.collections.books.find({
  author: {
    $all: [ 'author1', 'author2']+
    $size: 2
  }
});

##Check MongoDB
###R: When you perform a search in a collection and wish to exclude one or several fields 
###you can use 0 to indicate not to show the field:
> db.colleccion.find({}, {"name of the field not requiered": 0 })
###to include it we use 1
> db.colleccion.find({}, {"nombre campo no requerido": 1 })
###If you want to obtain only the value (or the values of a certain field) you get it in this way:
> db.terminales.find().forEach(function(row) {print(row.field)})

##Filter data of a collection by date
###R: Assuming that you do not have the date field in the Collection, with the ObjectId you 
###can have the date that the application was registered you can see it in the following way:
> ObjectId.getTimestamp()
###the next thing is to look for the records of the last hour (one hour of difference with 
###respect to the current one); you must calculate the last hour and compare it with the ObjectId () timestamp
###we must use the $ where function to calculate the date
> db.OPERATIONS.find({ 
    $where: 
    function() { 
        var ultimaHora = new Date();
        ultimaHora.setHours(ultimaHora.getHours() - 1);
        return this.Description ==  "Not playable" &&   this._id.getTimestamp() >= ultimaHora 
        } 
    }).count()
    
 ##How to compare two collections in MongoDB?
 ###R: this works manages to compare both collections and obtain the difference between them,
 ###comparing objects with the same attributes
 > function filter(obj1, obj2) {
    var result = {};
    for(key in obj1) {
        if(obj2[key] != obj1[key]) result[key] = obj2[key];
        if(typeof obj2[key] == 'array' && typeof obj1[key] == 'array') 
            result[key] = arguments.callee(obj1[key], obj2[key]);
        if(typeof obj2[key] == 'object' && typeof obj1[key] == 'object') 
            result[key] = arguments.callee(obj1[key], obj2[key]);
    }
    return result;
}

##What is MongoDB?
###R: MongoDB is a document-oriented database. This means that instead of saving the data 
###in registers, it saves the data in documents.

##Where can MongoDB be used?
###R: Although it is often said that NoSQL databases have a narrow scope of application, 
###MongoDB can be used in many of the projects we develop today.
###Any application that needs to store semi-structured data can use MongoDB.

##What´s the limit size of a document in MongoDB?
###R: 16MB for each document

##MongoDB VS MySQL
###R: It depends on the problem you face, if you have a database with a structure already defined,
###then MySQL is for you, if your database does not have an apparent order then MongoDb is what you need.
###The difference is that currently most data banks are presented without any specific order so 
###MongoDb is having more presence.

##What are the advantages of MongoDB?
###R: Data modeling,Scalability,Flexibility,High availability and It's open source.

###Why not use MongoDB?
##R: 

